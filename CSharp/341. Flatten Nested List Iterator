/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     int GetInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     IList<NestedInteger> GetList();
 * }
 */
public class NestedIterator {

    Queue<NestedInteger> queue;
    public NestedIterator(IList<NestedInteger> nestedList) {
        queue=new Queue<NestedInteger>();
        foreach(NestedInteger integer in nestedList) {
            setupQueue(integer);
        }
    }
    
    private void setupQueue(NestedInteger integer) {
        if (integer.IsInteger())
            queue.Enqueue(integer);
        else {
            foreach(NestedInteger child in integer.GetList())
            {
                setupQueue(child);
            }
        }
    }

    public bool HasNext() {
        return queue.Count>0;
    }

    public int Next() {
        if (queue.Count>0) {
            NestedInteger integer=queue.Dequeue();
            return integer.GetInteger();
        }
        else
            return -1;
    }
}