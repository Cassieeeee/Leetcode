/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     bool IsInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     int GetInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     IList<NestedInteger> GetList();
 * }
 */
public class Solution {
    public int DepthSum(IList<NestedInteger> nestedList) {
        int num=0;
        if (nestedList!=null && nestedList.Count>0)
        {
            foreach(NestedInteger integer in nestedList)
            {
                num+=sum(integer,1);
            }
        }
        return num;
    }
    
    private int sum(NestedInteger n,int deep)
    {
        if (n.IsInteger())
        {
            return n.GetInteger()*deep;
        }
        else
        {
            int s=0;
            foreach(NestedInteger child in n.GetList())
            {
                s+=sum(child,deep+1);
            }
            return s;
        }
    }
}