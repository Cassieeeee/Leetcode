public class Solution {
    public bool ValidTree(int n, int[,] edges) {
        if (edges==null)
            return false;
        if (edges.GetLength(0)==0)
            return n==1;
        Dictionary<int,List<int>> dict=new Dictionary<int,List<int>>();
        for(int i=0;i<edges.GetLength(0);i++)
        {
            int v1=edges[i,0];
            int v2=edges[i,1];
            if (dict.ContainsKey(v1))
                dict[v1].Add(v2);
            else 
                dict.Add(v1,new List<int>(){v2});
            if (dict.ContainsKey(v2))
                dict[v2].Add(v1);
            else
                dict.Add(v2,new List<int>(){v1});
        }
        
        for(int i=0;i<n;i++)
        {
            if (!dict.ContainsKey(i))
                return false;
        }
        
        bool[] visited=new bool[n];
        if (hasCircle(dict,visited,0,-1))
            return false;
        for(int i=0;i<n;i++)
        {
            if (!visited[i])
                return false;
        }
        
        return true;
    }
    
    bool hasCircle(Dictionary<int,List<int>> dict,bool[] visited, int u,int p)
    {
        visited[u]=true;
        foreach(int k in dict[u])
        {
            if ((visited[k] && k!=p) || (!visited[k] && hasCircle(dict,visited,k,u)))
                return true;
        }
        return false;
    }
}