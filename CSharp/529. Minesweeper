public class Solution {
    
    int[] dx = new int[8]{-1, 0, 1, -1, 1, 0, 1, -1};
    int[] dy = new int[8]{-1, 1, 1, 0, -1, -1, 0, 1};

    public char[,] UpdateBoard(char[,] board, int[] click) {
        if (board!=null)
        {
            int m=board.GetLength(0);
            int n=board.GetLength(1);
            int x=click[0];
            int y=click[1];
            if (board[x,y]=='M')
                board[x,y]='X';
            else if (board[x,y]=='E')
            {
                resetBoard(board,m,n,x,y);
            }               
        }
        
        return board;
    }
    
    private void resetBoard(char[,] board,int m,int n,int x,int y)
    {
        int mineCount=getMineCount(board,m,n,x,y);
        if (mineCount==0)
        {
            board[x,y]='B';
            for(int i=0;i<8;i++)
            {
                int nx=x+dx[i];
                int ny=y+dy[i];
                if (nx<0 || ny<0 || nx==m || ny==n)
                    continue;
                if (board[nx,ny]=='E')
                    resetBoard(board,m,n,nx,ny);
            }
        }           
        else
        {
             board[x,y]=(char)(mineCount+'0');
        }

    }
    
    private int getMineCount(char[,] board,int m,int n,int x,int y)
    {
        int count=0;
        for(int i=-1;i<=1;i++)
        {
            for(int j=-1;j<=1;j++)
            {
                int nx=x+i;
                int ny=y+j;
                if (nx<0 || ny<0 || nx==m || ny==n)
                    continue;
                if (board[nx,ny]=='M')
                    count++;
            }
        }
        return count;
    }
}