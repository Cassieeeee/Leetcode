/**
 * Definition for an interval.
 * public class Interval {
 *     public int start;
 *     public int end;
 *     public Interval() { start = 0; end = 0; }
 *     public Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public IList<Interval> Insert(IList<Interval> intervals, Interval newInterval) {
        int i=0;
        IList<Interval> list=new List<Interval>();      
        while(i<intervals.Count)
        {
            Interval v=intervals[i];
            if (isOverlap(newInterval,v))
            {
                newInterval.start=Math.Min(newInterval.start,v.start);
                newInterval.end=Math.Max(newInterval.end,v.end);
            }
            else
            {
                if (v.start>newInterval.end) {
                    list.Add(newInterval);
                    newInterval=null;
                    while(i<intervals.Count) {
                        list.Add(intervals[i]);
                        i++;
                    }
                }
                else
                    list.Add(v);
            }
            i++;
        }
        if (newInterval!=null)
            list.Add(newInterval);
        
        return list;
    }
    
    private bool isOverlap(Interval v1, Interval v2)
    {
       return !(v2.end<v1.start || v2.start>v1.end);
    }
}