public class Solution {
    public bool CanFinish(int numCourses, int[,] prerequisites) {
        int[] indegree=new int[numCourses];
        Dictionary<int,List<int>> dict=new Dictionary<int,List<int>>();
        int n=prerequisites.GetLength(0);
        for(int i=0;i<n;i++) {
            indegree[prerequisites[i,0]]++;
            if (dict.ContainsKey(prerequisites[i,1]))
                dict[prerequisites[i,1]].Add(prerequisites[i,0]);
            else
                dict.Add(prerequisites[i,1],new List<int>(){prerequisites[i,0]});
        }
        Queue<int> queue=new Queue<int>();
        for(int i=0;i<numCourses;i++)
        {
            if (indegree[i]==0)
                queue.Enqueue(i);
        }
        int visited=0;
        while (queue.Count>0) {
            int idx=queue.Dequeue();
            visited++;
            if (dict.ContainsKey(idx)) {
                foreach(int key in dict[idx]) {
                    indegree[key]--;
                    if(indegree[key]==0)
                        queue.Enqueue(key);
                }
            }
        }
        
        return visited==numCourses;
    }
}