/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        StringBuilder sb=new StringBuilder();
        buildData(root,sb);
        return sb.ToString().Substring(1);
    }
    
    private void buildData(TreeNode node,StringBuilder sb)
    {
        if (node==null)
        {
            sb.Append(",NULL");
        }
        else
        {
            sb.Append(","+node.val.ToString());
            buildData(node.left,sb);
            buildData(node.right,sb);
        }
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        if (!string.IsNullOrEmpty(data))
        {
            string[] arr=data.Split(',');
            Queue<string> queue=new Queue<string>();
            foreach(string s in arr)
                queue.Enqueue(s);
            TreeNode root=buildTree(queue);
            return root;
        }
        else
            return null;
    }
    
    private TreeNode buildTree(Queue<string> queue)
    {
        string s=queue.Dequeue();
        if (s=="NULL")
            return null;
        else
        {
            TreeNode node=new TreeNode(int.Parse(s));
            node.left=buildTree(queue);
            node.right=buildTree(queue);
            return node;
        }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));