public class Solution {
    
    int count=0;
    public int FindTargetSumWays(int[] nums, int S) {
        if (nums!=null)
        {
            DFS(nums,0,S,0);
        }
            
        return count;
    }
    
    private void DFS(int[] nums,int index,int S,int sum)
    {
        if (index==nums.Length)
        {
            if (sum==S)
                count++;
            return;
        }
        
        for(int i=0;i<=1;i++)
        {
            if (i==0)
            {
                DFS(nums,index+1,S,sum-nums[index]);
            }
            else
                DFS(nums,index+1,S,sum+nums[index]);
        }
    }
}


public class Solution {
    
    public int FindTargetSumWays(int[] nums, int S) {
        int count=0;
        if (nums!=null && nums.Length>0) {
            count=getCount(nums,0,S,new Dictionary<string,int>());
        }
        return count;
    }
    
    private int getCount(int[] nums,int index,int target,Dictionary<string,int> dict) {
        if (index==nums.Length) {
            if (target==0)
                return 1;
            else
                return 0;
        }
        string key=index.ToString()+":"+target.ToString();
        if (dict.ContainsKey(key))
            return dict[key];
        int minus=getCount(nums,index+1,target+nums[index],dict);
        int plus=getCount(nums,index+1,target-nums[index],dict);
        dict.Add(key,minus+plus);
        return minus+plus;
    }
}