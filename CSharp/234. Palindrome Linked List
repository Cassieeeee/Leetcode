/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public bool IsPalindrome(ListNode head)
        {
            if (head == null || head.next == null)
            {
                return true;
            }

            ListNode middleNode = findMiddle(head);
            ListNode newHead = reverse(middleNode);

            while (head != null && newHead != null)
            {
                if (head.val != newHead.val)
                {
                    return false;
                }
                head = head.next;
                newHead = newHead.next;
            }

            return true;
        }

        private ListNode findMiddle(ListNode head)
        {
            ListNode fast = head;
            ListNode slow = head;
            while (fast!=null && fast.next!=null)
            {
                fast = fast.next.next;
                slow = slow.next;
            }
            return slow;
        }

        private ListNode reverse(ListNode head)
        {
            ListNode newHead = null;
            ListNode temp = head;
            while (temp != null)
            {
                ListNode t = temp.next;
                temp.next = newHead;
                newHead = temp;
                temp = t;
            }
            return newHead;
        }
}