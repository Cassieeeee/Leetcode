public class Solution {
    public int NumDecodings(string s) {
        long[] f=new long[2];
        if (!string.IsNullOrEmpty(s))
        {
            f[0]=ways(s[0]);
            if (f[0]==0)
                return 0;
            if (s.Length==1)
                return (int)f[0];
            f[1]=f[0]*ways(s[1])+ways(s[0],s[1]);
            for(int i=2;i<s.Length;i++)
            {
                long temp=f[1];
                f[1]=(f[1]*ways(s[i])+f[0]*ways(s[i-1],s[i])) % 1000000007;
                f[0]=temp;
            }
            return (int)f[1];
        }
        else
            return 0;
    }
    
    private long ways(char c)
    {
        if (c=='*')
            return 9;
        else if (c=='0')
            return 0;
        return 1;
    }
    
    private long ways(char a,char b)
    {
        if (a=='0')
            return 0;
        if (a!='*' && b!='*')
            return (a-'0')*10+(b-'0')<=26 ? 1:0;
        if (a=='*' && b=='*')
            return 15;
        if (a=='*')
        {
            if (b<='6')
                return 2;
            else
                return 1;
        }
        else
        {
            if (a=='1')
                return 9;
            else if (a=='2')
                return 6;
            else
                return 0;
        }
    }
}