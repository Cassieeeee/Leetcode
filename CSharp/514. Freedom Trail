public class Solution {
    
    Dictionary<string,Dictionary<int,int>> dict=new Dictionary<string,Dictionary<int,int>>();
    
    public int FindRotateSteps(string ring, string key) {
        if (string.IsNullOrEmpty(key) || string.IsNullOrEmpty(ring))
        {
            return 0;
        }
        return DFS(ring,key,0);
    }
    
    private int DFS(string ring, string key,int i)
    {
        if (i==key.Length)
            return 0;
        char c=key[i];
        if (dict.ContainsKey(ring) && dict[ring].ContainsKey(i))
            return dict[ring][i];
        int f=frontPos(ring,c);
        int b=backPos(ring,c);
        int minFront=1+f+DFS(ring.Substring(f)+ring.Substring(0,f),key,i+1);
        int minBack=1+ring.Length-b+DFS(ring.Substring(b)+ring.Substring(0,b),key,i+1);
        int res=Math.Min(minFront,minBack);
        if (!dict.ContainsKey(ring))
        {
            dict.Add(ring,new Dictionary<int,int>());
        }
        if (!dict[ring].ContainsKey(i))
        {
            dict[ring].Add(i,res);
        }
        else
            dict[ring][i]=res;
        return res;
    }
    
    private int frontPos(string ring,char c)
    {
        return ring.IndexOf(c);
    }
    
    private int backPos(string ring,char c)
    {
        if (ring[0]==c)
            return 0;
        else
            return ring.LastIndexOf(c);
    }
}