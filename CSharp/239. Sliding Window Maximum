public class Solution {
    public int[] MaxSlidingWindow(int[] nums, int k) {
        if (nums!=null && nums.Length>0)
        {
            if (k==1)
                return nums;
            SortedList<int,int> dict=new SortedList<int,int>();
            int start=0,end=0;
            while(end<k) {
                if (dict.ContainsKey(nums[end]))
                    dict[nums[end]]++;
                else
                    dict.Add(nums[end],0);
                end++;
            }
            int[] res=new int[nums.Length-k+1];
            res[start]=dict.Keys.Last();
            while(end<nums.Length) {
                int removeNum=nums[start];
                if (dict[removeNum]==0)
                    dict.Remove(removeNum);
                else
                    dict[removeNum]--;
                if (dict.ContainsKey(nums[end]))
                    dict[nums[end]]++;
                else
                    dict.Add(nums[end],0);
                start++;
                end++;
                res[start]=dict.Keys.Last();
            }

            return res;
        }
        else
            return new int[0];
    }
}

public class Solution {
    public int[] MaxSlidingWindow(int[] nums, int k) {
        if (nums!=null && nums.Length>0)
        {
            if (k==1)
                return nums;
            int[] left=new int[nums.Length];
            int[] right=new int[nums.Length];
            left[0]=nums[0];
            right[nums.Length-1]=nums[nums.Length-1];
           
            for(int i=1;i<nums.Length;i++) {
                int j=nums.Length-i-1;
                left[i]= (i % k==0) ? nums[i] : Math.Max(left[i-1],nums[i]);
                right[j]= (j%k==0) ? nums[j] : Math.Max(right[j+1],nums[j]);
            }
            
            int[] res=new int[nums.Length-k+1];
            for(int i=0;i<res.Length;i++) {
                res[i]=Math.Max(right[i],left[i+k-1]);
            }
            return res;
        }
        else
            return new int[0];
    }
}