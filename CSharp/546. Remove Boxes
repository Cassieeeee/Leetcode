public class Solution {
    public int RemoveBoxes(int[] boxes) {
        if (boxes==null || boxes.Length==0)
            return 0;
        int l=boxes.Length;
        int[,,] dp=new int[l,l,l];
        return getMax(dp,boxes,0,l-1,1);
    }
    
    private int getMax(int[,,] dp, int[] boxes, int i, int j, int k) {
        if (i > j) {
            return 0;
        } else if (i == j) {
            return k * k;
        } else if (dp[i,j,k] != 0) {
            return dp[i,j,k];
        } else {
            int temp = getMax(dp, boxes, i + 1, j, 1) + k * k;

            for (int m = i + 1; m <= j; m++) {
                if (boxes[i] == boxes[m]) {
                    temp = Math.Max(temp, getMax(dp, boxes, i + 1, m - 1, 1) + getMax(dp, boxes, m, j, k + 1));
                }
            }

            dp[i,j,k] = temp;
            return temp;
        }
    }

}