public class Solution {
    public int FindMinStep(string board, string hand) {
        Dictionary<char,int> dict=new Dictionary<char,int>();
        if (!string.IsNullOrEmpty(board) && !string.IsNullOrEmpty(hand))
        {
            foreach(char c in hand)
            {
                if (dict.ContainsKey(c))
                    dict[c]++;
                else
                    dict.Add(c,1);
            }
            board=removeDup(board);
            if (board=="")
                return 0;
            int v= DFS(board+"#",dict);
            if (v>=10)
                return -1;
            else
                return v;
        }
        else
        {
            return -1;
        }
    }
    
    private int DFS(string board,Dictionary<char,int> dict)
    {
        board=removeDup(board);
        if (board=="#")
            return 0;
        int i=0,j=1;
        int res=10;
        
        while(j<board.Length)
        {
            if (board[j]!=board[i])
            {
                int need=3-(j-i);
                if (dict.ContainsKey(board[i]) && dict[board[i]]>=need)
                {
                    dict[board[i]]-=need;
                    res=Math.Min(res,DFS(board.Substring(0,i)+board.Substring(j),dict)+need);

                    dict[board[i]]+=need;
                }
                i=j;
            }
            j++;
        }
        return res;
    }
    
    private string removeDup(string board)
    {
        int i=0,j=1;
        while(j<board.Length)
        {
            if (board[j]==board[i])
            {
                j++;
                continue;
            }
            if (j-i>=3)
            {
                board=removeDup(board.Substring(0,i)+board.Substring(j));
                
            }
            i=j;
            j++;
        }
        return board;
    }
}