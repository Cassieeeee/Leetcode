public class Trie {

    TreeNode root;
    /** Initialize your data structure here. */
    public Trie() {
        root=new TreeNode(' ');
    }
    
    /** Inserts a word into the trie. */
    public void Insert(string word) {
        TreeNode p=root;
        for(int i=0;i<word.Length;i++)
        {
            int index=word[i]-'a';
            if (p.Children[index]==null)
            {
                p.Children[index]=new TreeNode(word[i]);
            }
            p=p.Children[index];
        }
        p.IsWord=true;
    }
    
    /** Returns if the word is in the trie. */
    public bool Search(string word) {
        TreeNode p=root;
        for(int i=0;i<word.Length;i++)
        {
            int index=word[i]-'a';
            if (p.Children[index]==null)
                return false;
            p=p.Children[index];
        }
        return p.IsWord;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public bool StartsWith(string prefix) {
        TreeNode p=root;
        for(int i=0;i<prefix.Length;i++)
        {
            int index=prefix[i]-'a';
            if (p.Children[index]==null)
                return false;
            p=p.Children[index];
        }
        return true;
    }
}

class TreeNode
{
    public TreeNode[] Children=new TreeNode[26];
    public char Character;
    public TreeNode(char c)
    {
        Character=c;
    }
    public bool IsWord=false;
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */